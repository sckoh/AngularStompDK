{"version":3,"sources":["angular-stomp.es6.js"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ngstompProvider","this","settings","credential","login","password","url","_url","_urlWrapper","_x","apply","arguments","toString","class","clazz","setting","settingsObject","debug","boolean","vhost","host","$get","$q","$log","$rootScope","Stomp","$timeout","Session","ngStompWebSocket","RECONNECT_TIMEOUT","connections","deferred","defer","promiseResult","promise","subscribed","connect","prepareUrlWithToken","getSocialBearerToken","_this","stompClient","over","client","resolve","j","len","length","subscribeFn","$digestStompAction","console","log","subscribe","callback","header","scope","then","$stompSubscribe","unRegisterScopeOnDestroy","push","unsubscribe","$stompUnSubscribe","send","queue","data","sendDeffered","JSON","stringify","disconnect","disconnectionPromise","self","subscription","indexToRemove","i","splice","subscribedIndexToRemove","$$phase","$apply","undefined","angular","isFunction","$on","module","provider","constant","window"],"mappings":";CACC,WADD,YAEA,IAAIA,GAAgB,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAA,GAASC,KAAOD,GAAO,CAAE,GAAIE,GAAOF,EAAMC,EAAMC,GAAKC,cAAe,EAAUD,EAAKE,QAAOF,EAAKG,UAAW,GAAQC,OAAOR,iBAAiBC,EAAQC,GAAU,MAAO,UAAUO,EAAaC,EAAYC,GAAiJ,MAA9HD,IAAYV,EAAiBS,EAAYG,UAAWF,GAAiBC,GAAaX,EAAiBS,EAAaE,GAAqBF,MAEvaI,EAAkB,SAAUC,EAAUL,GAAe,KAAMK,YAAoBL,IAAgB,KAAM,IAAIM,WAAU,sCAJjHC,EAAe,WAEN,QAFTA,KAQEH,EAAgBI,KARlBD,GAGEC,KAAKC,YAoET,MA1DAnB,GAbEiB,GAMFG,YASQb,MATE,SAACc,EAAOC,GAGd,MAFAJ,MAAKC,SAASE,MAAQA,EACtBH,KAAKC,SAASG,SAAWA,EAClBJ,OAGXK,KAUQhB,MAAQ,SAAUiB,GACd,GAAIC,GAAc,SAAaC,GAC3B,MAAOF,GAAKG,MAAMT,KAAMU,WAO5B,OAJAH,GAAYI,SAAW,WACnB,MAAOL,GAAKK,YAGTJ,GAnBhB,SAACF,GAEA,MADAL,MAAKC,SAASI,IAAMA,EACbL,QAuBPY,SACIvB,MArBH,SAACwB,GAEF,MADAb,MAAKC,SAAQ,SAASY,EACfb,OAGXc,SAsBQzB,MAtBD,SAAC0B,GAEJ,MADAf,MAAKC,SAAWc,EACTf,OAGXgB,OAuBQ3B,MAvBH,SAAC4B,GAEF,MADAjB,MAAKC,SAASe,MAAQC,EACfjB,OAGXkB,OAwBQ7B,MAxBH,SAAC8B,GAEF,MADAnB,MAAKC,SAASiB,MAAQC,EACfnB,OAIXoB,MA2BQ/B,OAAAA,KAAAA,OAAAA,aAAAA,QAAAA,WAAAA,UA3BJ,SAACgC,EAAIC,EAAMC,EAAYC,EAAOC,EAAUC,GACxC,MAAO,IAAIC,GAAiB3B,KAAKC,SAAUoB,EAAIC,EAAMC,EAAYC,EAAOC,EAAUC,QAvCpF3B,KA0CA4B,EAAgB,WAGP,QAHTA,GAGU1B,EAAUoB,EAAIC,EAAMC,EAAYC,EAAOC,EAAUC,GAkCzD9B,EAAgBI,KArClB2B,GAIE3B,KAAKC,SAAWA,EAChBD,KAAKC,SAAS2B,kBAAoB5B,KAAKC,SAAS2B,kBAAoB5B,KAAKC,SAAS2B,kBAAoB,IACtG5B,KAAKqB,GAAKA,EACVrB,KAAKyB,SAAWA,EAChBzB,KAAKwB,MAAQA,EACbxB,KAAKsB,KAAOA,EACZtB,KAAKuB,WAAaA,EAClBvB,KAAK6B,eACL7B,KAAK8B,SAAW9B,KAAKqB,GAAGU,QACxB/B,KAAKgC,cAAgBhC,KAAK8B,SAASG,QACnCjC,KAAKkC,cACLlC,KAAK0B,QAAUA,EACf1B,KAAKmC,UA8KT,MAxIArD,GAtDE6C,GAmBFS,qBAqCQ/C,MArCW,WACf,MAAOW,MAAKC,SAASI,IAAM,iBAAmBL,KAAK0B,QAAQW,sBAAqB,KAGpFF,SAsCQ9C,MAtCD,WAuCK,GAAIiD,GAAQtC,IAjBpB,OArBAA,MAAKuC,YAAcvC,KAAKC,SAAS,SAAWD,KAAKwB,MAAMgB,KAAK,GAAIxC,MAAKC,SAAS,SAASD,KAAKoC,wBAA0BpC,KAAKwB,MAAMiB,OAAOzC,KAAKoC,uBAC7IpC,KAAKuC,YAAYvB,MAAQhB,KAAKC,SAASe,MAAQhB,KAAKsB,KAAKN,MAAQ,aAGjEhB,KAAKuC,YAAYJ,WAEb,WACIG,EAAKR,SAASY,SACd,KAAK,GAAIC,GAAI,EAAGC,EAAMN,EAAKJ,WAAWW,OAAYD,EAAJD,EAASA,IACnDL,EAAKJ,WAAWS,GAAGG,aAEvBR,GAAKS,sBAET,WACIC,QAAQC,IAAI,WACZX,EAAKb,SAAS,WACVa,EAAKH,WACNG,EAAKrC,SAAS2B,mBACjBU,EAAKS,uBAGN/C,KAAKgC,gBAGhBkB,WAoCQ7D,MApCC,SAACgB,EAAK8C,EAAUC,EAAQC,GAqCrB,GAAIf,GAAQtC,IAzBpB,OAXAA,MAAKgC,cAAcsB,KAAK,WACpB,GAAIR,GAAc,WACdR,EAAKiB,gBAAgBlD,EAAK8C,EAAUC,OACpCd,EAAKkB,yBAAyBH,EAAOhD,GAEzCiC,GAAKJ,WAAWuB,MACZpD,IAAKA,EACLyC,YAAaA,IAEjBA,MAEG9C,OAGX0D,aAuCQrE,MAvCG,SAACgB,GAwCA,GAAIiC,GAAQtC,IAtCpB,OADAA,MAAKgC,cAAcsB,KAAK,WA0CZ,MA1CkBhB,GAAKqB,kBAAkBtD,KAC9CL,OAGX4D,MA4CQvE,MA5CJ,SAACwE,EAAOC,EAAMV,GA6CN,GAAId,GAAQtC,KA5ChB+D,EAAe/D,KAAKqB,GAAGU,OAO3B,OALA/B,MAAKgC,cAAcsB,KAAK,WACpBhB,EAAKC,YAAYqB,KAAKC,EAAOT,MAAcY,KAAKC,UAAUH,IAC1DC,EAAarB,YAGVqB,EAAa9B,UAGxBiC,YA+CQ7E,MA/CE,WAgDE,GAAIiD,GAAQtC,KA/ChBmE,EAAuBnE,KAAKqB,GAAGU,OAMnC,OALA/B,MAAKuC,YAAY2B,WAAW,WACxBC,EAAqBzB,UACrBJ,EAAKS,uBAGFoB,EAAqBlC,UAGhCsB,iBAkDQlE,MAlDO,SAACwE,EAAOV,EAAUC,GAC7B,GAAIgB,GAAOpE,KACPqE,EAAeD,EAAK7B,YAAYW,UAAUW,EAAO,WACjDV,EAAS1C,MAAM2D,EAAK7B,YAAa7B,WACjC0D,EAAKrB,sBACNK,EACHpD,MAAK6B,YAAY4B,MAAMpD,IAAKwD,EAAOQ,aAAcA,MAGrDV,mBAmDQtE,MAnDS,SAACwE,GAEd,IAAK,GADDS,IAAgB,EACXC,EAAI,EAAG3B,EAAM5C,KAAK6B,YAAYgB,OAAYD,EAAJ2B,EAASA,IACpD,GAAIvE,KAAK6B,YAAY0C,GAAGlE,MAAQwD,EAAO,CACnCS,EAAgBC,EAChBvE,KAAK6B,YAAY0C,GAAGF,aAAaX,aACjC,OAGJY,KAAkB,GAClBtE,KAAK6B,YAAY2C,OAAOF,EAAe,EAI3C,KAAK,GADDG,IAA0B,EACrB9B,EAAI,EAAGC,EAAM5C,KAAKkC,WAAWW,OAAYD,EAAJD,EAASA,IACnD,GAAI3C,KAAKkC,WAAWS,GAAGtC,MAAQwD,EAAO,CAClCY,EAA0B9B,CAC1B,OAGJ8B,KAA4B,GAC5BzE,KAAKkC,WAAWsC,OAAOC,EAAyB,KAIxD1B,oBAoDQ1D,MApDU,YACbW,KAAKuB,WAAWmD,SAAW1E,KAAKuB,WAAWoD,WAGhDnB,0BAqDQnE,MArDgB,SAACgE,EAAOhD,GAsDpB,GAAIiC,GAAQtC,IArDN4E,UAAVvB,GAAuBwB,QAAQC,WAAWzB,EAAM0B,MAChD1B,EAAM0B,IAAI,WAAY,WAuDd,MAvDoBzC,GAAKoB,YAAYrD,SAjInDsB,IAoINkD,SAAQG,OAAO,qBACVC,SAAS,UAAWlF,GACpBmF,SAAS,QAASC,OAAO3D","file":"angular-stomp.min.js","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    setting(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope, Stomp, $timeout, Session) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope, Stomp, $timeout, Session);\n    }\n}\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope, Stomp, $timeout, Session) {\n        this.settings = settings;\n        this.settings.RECONNECT_TIMEOUT = this.settings.RECONNECT_TIMEOUT ? this.settings.RECONNECT_TIMEOUT : 3000;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.Stomp = Stomp;\n        this.$log = $log;\n        this.$rootScope = $rootScope;\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n        this.subscribed = [];\n        this.Session = Session;\n        this.connect();\n    }\n\n    prepareUrlWithToken() {\n        return this.settings.url + '?access_token=' + this.Session.getSocialBearerToken(true);\n    }\n\n    connect() {\n        this.stompClient = this.settings['class'] ? this.Stomp.over(new this.settings['class'](this.prepareUrlWithToken())) : this.Stomp.client(this.prepareUrlWithToken());\n        this.stompClient.debug = this.settings.debug ? this.$log.debug : function () {\n        };\n\n        this.stompClient.connect(\n            {},\n            () => {\n                this.deferred.resolve();\n                for (var j = 0, len = this.subscribed.length; j < len; j++) {\n                    this.subscribed[j].subscribeFn();\n                }\n                this.$digestStompAction();\n            },\n            () => {\n                console.log('fail ws');\n                this.$timeout(() => {\n                    this.connect();\n                }, this.settings.RECONNECT_TIMEOUT);\n                this.$digestStompAction();\n            }\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, header, scope) {\n        this.promiseResult.then(() => {\n            let subscribeFn = () => {\n                this.$stompSubscribe(url, callback, header || {});\n                this.unRegisterScopeOnDestroy(scope, url);\n            };\n            this.subscribed.push({\n                url: url,\n                subscribeFn: subscribeFn\n            });\n            subscribeFn();\n        });\n        return this;\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    }\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    }\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback, header) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction();\n        }, header);\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n\n        let subscribedIndexToRemove = false;\n        for (var j = 0, len = this.subscribed.length; j < len; j++) {\n            if (this.subscribed[j].url === queue) {\n                subscribedIndexToRemove = j;\n                break;\n            }\n        }\n        if (subscribedIndexToRemove !== false) {\n            this.subscribed.splice(subscribedIndexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\nangular.module('AngularStompDK', [])\n    .provider('ngstomp', ngstompProvider)\n    .constant('Stomp', window.Stomp);\n"],"sourceRoot":"/source/"}