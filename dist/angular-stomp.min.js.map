{"version":3,"sources":["angular-stomp.es6.js"],"names":["_createClass","defineProperties","target","props","key","prop","configurable","value","writable","Object","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","ngstompProvider","this","settings","credential","login","password","url","_url","_urlWrapper","_x","apply","arguments","toString","class","clazz","setting","settingsObject","debug","boolean","vhost","host","$get","$q","$log","$rootScope","Stomp","$timeout","ngStompWebSocket","RECONNECT_TIMEOUT","connections","deferred","defer","promiseResult","promise","subscribed","connect","_this","stompClient","over","client","resolve","j","len","length","subscribeFn","$digestStompAction","subscribe","callback","header","scope","then","$stompSubscribe","unRegisterScopeOnDestroy","push","unsubscribe","$stompUnSubscribe","send","queue","data","sendDeffered","JSON","stringify","disconnect","disconnectionPromise","self","subscription","indexToRemove","i","splice","subscribedIndexToRemove","$$phase","$apply","undefined","angular","isFunction","$on","module","provider","constant","window"],"mappings":"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","file":"angular-stomp.min.js","sourcesContent":["class ngstompProvider {\n\n    constructor() {\n        this.settings = {};\n    }\n\n    credential(login, password) {\n        this.settings.login = login;\n        this.settings.password = password;\n        return this;\n    }\n\n    url(url) {\n        this.settings.url = url;\n        return this;\n    }\n\n    class(clazz) {\n        this.settings.class = clazz;\n        return this;\n    }\n\n    setting(settingsObject) {\n        this.settings = settingsObject;\n        return this;\n    }\n\n    debug(boolean) {\n        this.settings.debug = boolean;\n        return this;\n    }\n\n    vhost(host) {\n        this.settings.vhost = host;\n        return this;\n    }\n\n    /* @ngInject */\n    $get($q, $log, $rootScope, Stomp, $timeout) {\n        return new ngStompWebSocket(this.settings, $q, $log, $rootScope, Stomp, $timeout);\n    }\n}\nclass ngStompWebSocket {\n\n    /*@ngNoInject*/\n    constructor(settings, $q, $log, $rootScope, Stomp, $timeout) {\n        this.settings = settings;\n        this.settings.RECONNECT_TIMEOUT = this.settings.RECONNECT_TIMEOUT ? this.settings.RECONNECT_TIMEOUT : 3000;\n        this.$q = $q;\n        this.$timeout = $timeout;\n        this.Stomp = Stomp;\n        this.$log = $log;\n        this.$rootScope = $rootScope;\n        this.connections = [];\n        this.deferred = this.$q.defer();\n        this.promiseResult = this.deferred.promise;\n        this.subscribed = [];\n        this.connect();\n    }\n\n    connect() {\n        this.stompClient = this.settings['class'] ? this.Stomp.over(new this.settings['class'](this.settings.url)) : this.Stomp.client(this.settings.url);\n        this.stompClient.debug = this.settings.debug ? this.$log.debug : function () {\n        };\n\n        this.stompClient.connect(\n            {},\n            () => {\n                this.deferred.resolve();\n                for (var j = 0, len = this.subscribed.length; j < len; j++) {\n                    this.subscribed[j].subscribeFn();\n                }\n                this.$digestStompAction();\n            },\n            () => {\n                this.$timeout(() => {\n                    this.connect();\n                }, this.settings.RECONNECT_TIMEOUT);\n                this.$digestStompAction();\n            },\n            this.settings.vhost\n        );\n        return this.promiseResult;\n    }\n\n    subscribe(url, callback, header, scope) {\n        this.promiseResult.then(() => {\n            let subscribeFn = () => {\n                this.$stompSubscribe(url, callback, header || {});\n                this.unRegisterScopeOnDestroy(scope, url);\n            };\n            this.subscribed.push({\n                url: url,\n                subscribeFn: subscribeFn\n            });\n            subscribeFn();\n        });\n        return this;\n    }\n\n    unsubscribe(url) {\n        this.promiseResult.then(() => this.$stompUnSubscribe(url));\n        return this;\n    }\n\n    send(queue, data, header) {\n        let sendDeffered = this.$q.defer();\n\n        this.promiseResult.then(() => {\n            this.stompClient.send(queue, header || {}, JSON.stringify(data));\n            sendDeffered.resolve();\n        });\n\n        return sendDeffered.promise;\n    }\n\n    disconnect() {\n        let disconnectionPromise = this.$q.defer();\n        this.stompClient.disconnect(() => {\n            disconnectionPromise.resolve();\n            this.$digestStompAction();\n        });\n\n        return disconnectionPromise.promise;\n    }\n\n    $stompSubscribe(queue, callback, header) {\n        let self = this;\n        let subscription = self.stompClient.subscribe(queue, function() {\n            callback.apply(self.stompClient, arguments);\n            self.$digestStompAction();\n        }, header);\n        this.connections.push({url: queue, subscription: subscription});\n    }\n\n    $stompUnSubscribe(queue) {\n        let indexToRemove = false;\n        for (var i = 0, len = this.connections.length; i < len; i++) {\n            if (this.connections[i].url === queue) {\n                indexToRemove = i;\n                this.connections[i].subscription.unsubscribe();\n                break;\n            }\n        }\n        if (indexToRemove !== false) {\n            this.connections.splice(indexToRemove, 1);\n        }\n\n        let subscribedIndexToRemove = false;\n        for (var j = 0, len = this.subscribed.length; j < len; j++) {\n            if (this.subscribed[j].url === queue) {\n                subscribedIndexToRemove = j;\n                break;\n            }\n        }\n        if (subscribedIndexToRemove !== false) {\n            this.subscribed.splice(subscribedIndexToRemove, 1);\n        }\n    }\n\n    $digestStompAction() {\n        !this.$rootScope.$$phase && this.$rootScope.$apply();\n    }\n\n    unRegisterScopeOnDestroy(scope, url) {\n        if (scope !== undefined && angular.isFunction(scope.$on))\n            scope.$on('$destroy', () => this.unsubscribe(url) );\n    }\n}\nangular.module('AngularStompDK', [])\n    .provider('ngstomp', ngstompProvider)\n    .constant('Stomp', window.Stomp);\n"],"sourceRoot":"/source/"}